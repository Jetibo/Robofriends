{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOA8BeA,EAbH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE1B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACC,6BAAKF,IACL,4BAAIC,WCmBOK,EAxCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACK,8BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OACC,cAAC,EAAD,CAECR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZQ,EAAKP,UCKHS,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,qBAAKT,UAAU,MAAf,SACC,uBACAA,UAAU,oCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCEI,G,MARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,aCkBKC,E,kDApBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,qDAOnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,mEAGDG,KAAKX,MAAMK,a,GAjBOQ,aCyEZC,E,kDAlEd,aAAe,IAAD,8BACb,gBAgBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAhB1C,EAAKZ,MAAQ,CACZjB,OAAQ,GAER2B,YAAa,IALD,E,qDASd,WAAqB,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAACtB,OAAQkC,S,oBAUvC,WACC,MAAgCb,KAAKJ,MAA7BjB,EAAR,EAAQA,OAAQ2B,EAAhB,EAAgBA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACpC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAGrD,OAAQtC,EAAOwC,OAGd,sBAAK5C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAUzB,OAAQmC,WAPtB,gD,GA9BeZ,aCIHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCGdO,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,SAc1BX,M","file":"static/js/main.c783d5d7.chunk.js","sourcesContent":["// import React, {Component }  from 'react';\nimport React from 'react';\n\n// class Card extends Component {\n// \trender() {\n// \t\treturn (\n// \t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\n// \t\t\t<div>\n// \t\t\t\t<h2> {this.props.name}</h2>\n// \t\t\t\t<p>{this.props.email}</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// \t}\n// } \n\nconst Card =({name, email, id}) => {\n\t// const {name, email, id} = props; //destructuring\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t\t    <div>\n\t\t    \t{\n\t\t    \t\trobots.map((user, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\t\tkey={user.id} \n\t\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t    \t}\n\t\t    </div>\n\t\t);\n}\n\n\n// const CardList = ({robots}) => {\n// \tconst cardsArray = robots.map((user, i) => {\n// \t\treturn (<Card \n// \t\t\t\tkey={user.id} \n// \t\t\t\tid={robots[i].id} \n// \t\t\t\tname={robots[i].name} \n// \t\t\t\temail={robots[i].email}\n// \t\t\t\t/>\n// \t\t\t);\n// \t})\n// \treturn (\n// \t\t    <div>\n// \t\t    \t{cardsArray}\n// {/*\t\t      <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n// \t\t      <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n// \t\t      <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>*/}\n// \t\t    </div>\n// \t\t);\n// }\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b---green bg-lightest-blue' \n\t\t\ttype='Search' \n\t\t\tplaceholder='Search robots' \n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '900px'}}>\n\t\t\t{props.children}\t\n\t\t</div>\n\t);\n};\n\nexport default Scroll","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good! Sorry! </h1>\n\t\t}\n\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component} from 'react';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\n// import {robots} from './robots';\nimport './App.css';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundry from '../components/ErrorBoundry.js';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\t// robots: robots,\n\t\t\tsearchField: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=> response.json())\n\t\t\t.then(users =>this.setState({robots: users }));\n\t\t// this.setState({ robots: robots })\n\t\t// })\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value })\n\t\t// console.log(filteredRobots);\n\t}\n\n\trender() {\n\t\tconst { robots, searchField } = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\t// if (robots.lenght === 0){\n\t\t\treturn !robots.length ? \n\t\t\t<h1>Loading...</h1> : \n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t\t{/*<CardList robots={this.state.robots}/>*/}\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n// To use destructuring to clean up const { robots, searchField } = this.state;\n// \trender() {\n// \t\tconst filteredRobots = this.state.robots.filter(robot => {\n// \t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n// \t\t})\n// \t\tif (this.state.robots.lenght === 0){\n// \t\t\treturn <h1>Loading...</h1>\n// \t\t} else {\n// \t\t\treturn (\n// \t\t\t\t<div className='tc'>\n// \t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n// \t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n// \t\t\t\t\t<Scroll>\n// \t\t\t\t\t\t<CardList robots={filteredRobots}/>\n// \t\t\t\t\t\t{/*<CardList robots={this.state.robots}/>*/}\n// \t\t\t\t\t</Scroll>\n// \t\t\t\t</div>\n// \t\t\t);\n// \t\t}\n// \t}\n// }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card.js';\n// import CardList from './CardList';\nimport App from './containers/App.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(\n  <App />,\n    // <CardList robots={robots}/>,\n  document.getElementById('root')\n  );\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     {/*<App />*/}\n//     <h1> Hola Mundo! </h1>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}